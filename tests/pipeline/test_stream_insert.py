# This file is part of the Data Cleaning Library (openclean).
#
# Copyright (C) 2018-2021 New York University.
#
# openclean is released under the Revised BSD License. See file LICENSE for
# full license details.

"""Unit tests for the insert column operator in data processing pipelines."""

import pytest

from openclean.function.eval.base import Col, Cols, Const


def test_insert_multiple_columns_into_stream(ds):
    """Test inserting two new columns into a data stream."""
    op = ds.insert(['D', 'E'], pos=1, values=[1, Col('B') + Col('C')])
    assert op.columns == ['A', 'D', 'E', 'B', 'C']
    df = op.to_df()
    assert list(df.columns) == ['A', 'D', 'E', 'B', 'C']
    assert list(df['D']) == [1] * 10
    assert list(df['E']) == [9] * 10


def test_insert_single_column_into_stream(ds):
    """Test inserting a new column into a data stream."""
    op = ds.insert('D', pos=1, values=1)
    df = op.to_df()
    assert op.columns == ['A', 'D', 'B', 'C']
    assert list(df.columns) == ['A', 'D', 'B', 'C']
    assert list(df['D']) == [1] * 10


def test_unpack_values_for_multiple_columns_insert(ds):
    """Unit test to ensure that we correctly insert values for multiple columns
    that are generated from a single function (or a number of functions that is
    lower that the number of inserted columns). This test addresses the fix for
    issue #64.
    """
    # Insert two columns with values generated by a single evaluation function.
    op = ds.insert(['D', 'E'], pos=1, values=Cols(['B', 'C']))
    assert op.columns == ['A', 'D', 'E', 'B', 'C']
    df = op.to_df()
    assert list(df.columns) == ['A', 'D', 'E', 'B', 'C']
    assert list(df['D']) == list(range(10))
    assert list(df['E']) == [9-i for i in range(10)]
    # Insert three columns with values generated by two evaluation functions.
    op = ds.insert(['D', 'E', 'F'], values=[Col('A'), Cols(['B', 'C'])])
    assert op.columns == ['A', 'B', 'C', 'D', 'E', 'F']
    df = op.to_df()
    assert list(df.columns) == ['A', 'B', 'C', 'D', 'E', 'F']
    assert list(df['D']) == ['A'] * 10
    assert list(df['E']) == list(range(10))
    assert list(df['F']) == [9-i for i in range(10)]
    # Ensure that functions that return lists of values instead of tuples are
    # handled correctly.
    op = ds.insert(['D', 'E', 'F'], values=[Col('A'), Const([1, 2])])
    assert op.columns == ['A', 'B', 'C', 'D', 'E', 'F']
    df = op.to_df()
    assert list(df.columns) == ['A', 'B', 'C', 'D', 'E', 'F']
    assert list(df['D']) == ['A'] * 10
    assert list(df['E']) == [1] * 10
    assert list(df['F']) == [2] * 10
    # Error for value lists that do not match the number of inserted columns.
    with pytest.raises(ValueError):
        ds.insert(['D', 'E', 'F'], values=Cols('B', 'C')).count()
