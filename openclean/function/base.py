# This file is part of the Data Cleaning Library (openclean).
#
# Copyright (C) 2018-2020 New York University.
#
# openclean is released under the Revised BSD License. See file LICENSE for
# full license details.

"""Base class for value function. Collection of basic helper functions."""

from abc import ABCMeta, abstractmethod

import openclean.util as util


# -- Profiling function ------------------------------------------------------

class ProfilingFunction(metaclass=ABCMeta):
    """Profiler for a sequence of data values. Values are either scalar values
    or tuples of scalar values. Each sequence profiler implements the exec()
    method that consumes a list of values. The result type is implementation
    dependent. It should either be a scalar value (e.g. for aggregators) or
    a dictionary.

    Each profiling function has a (unique) name. The name is used as the key
    value in a dictionary that composes the results of multiple profiling
    functions.
    """
    def __init__(self, name):
        """Initialize the function name.

        Parameters
        ----------
        name: string
            Unique function name.
        """
        self._name = name if name else util.funcname(self)

    @abstractmethod
    def exec(self, values):
        """Compute one or more features over values in a given sequence.

        Parameters
        ----------
        values: iterable
            Iterable of scalar values or tuples of scalar values.

        Returns
        -------
        scalar or list or dict
        """
        raise NotImplementedError()

    def name(self):
        """Get the unique function name.

        Returns
        -------
        string
        """
        return self._name


# -- Value list functions -----------------------------------------------------

class DictionaryFunction(ProfilingFunction, metaclass=ABCMeta):
    """Interface for dictionary generating functions. These functins convert
    a list of values into a dictionary. Key values in the created dictionaries
    are either values from the given input list or a new generated list of
    values. Values that are associated with key values are implementation-
    specific results of applying an evaluation function on the key value.

    A typical example of a dictionary function is distinct. This function takes
    a list of values and outputs a dictionary where with each distinct value
    the frequency of that value in the list is associated.
    """
    def __init__(self, name=None, to_dict=None):
        """Set the function that is used to serialize mapping results for the
        profiling function. Expects a callable that takes two arguments: (1)
        a value and (2) the implementation-specific feature that is associated
        with the value by the map function.

        Parameters
        ----------
        name: string, default=None
            Unique function name.
        to_dict: callable, default=None
            Function that accepts a value and a feature as arguments and that
            returns a dictionary.
        """
        super(DictionaryFunction, self).__init__(name=name)
        self.to_dict = to_dict if to_dict else DefaultDictSerializer()

    def exec(self, values):
        """The execute method of the profiler returns a list of dictionaries.
        Each dictionary contains the serialization of a (value, feature)-pair
        in the dictionary that is returned by the map function.

        Parameters
        ----------
        values: list
            List of scalar values or tuples of scalar values.

        Returns
        -------
        list
        """
        return [self.to_dict(v, f) for v, f in self.map(values).items()]

    @abstractmethod
    def map(self, values):
        """The map function takes a list of values and outputs a dictionary.
        The keys in the returned dictionary are either values from the given
        input list or generated by the class implementation. The values that
        are associated with the keys are also implementation-specific.

        Parameters
        ----------
        values: list
            List of scalar values or tuples of scalar values.

        Returns
        -------
        dict
        """
        raise NotImplementedError()


class ListFunction(metaclass=ABCMeta):
    """Interface for functions that transform a given list of values."""
    @abstractmethod
    def apply(self, values):
        """Apply a function to each value in a given list. Returns a list of
        values that are the result of evaluating an associated value function
        for the respective input values.

        Should call the prepare method of an associated value function before
        executing the eval method on each individual value in the given list.

        Parameters
        ----------
        values: list
            List of scalar values or tuples of scalar values.

        Returns
        -------
        list
        """
        raise NotImplementedError()


# -- Abstract base class for value functions ----------------------------------

class ValueFunction(DictionaryFunction, ListFunction, metaclass=ABCMeta):
    """The abstract class for value functions defines the interface for methods
    that need to be implemented for preparing and evaluating the function.
    """
    def __init__(self, name=None, to_dict=None):
        """Initialize the function name.

        Parameters
        ----------
        name: string, default=None
            Unique function name.
        to_dict: callable, default=None
            Function that accepts a value and a feature as arguments and that
            returns a dictionary.
        """
        super(ValueFunction, self).__init__(name=name, to_dict=to_dict)

    def apply(self, values):
        """Apply the function to each value in a given list. Returns a list of
        values that are the result of the eval method for the respective input
        values.

        Calls the prepare method before executing the eval method on each
        individual value in the given list.

        Parameters
        ----------
        values: list
            List of scalar values or tuples of scalar values.

        Returns
        -------
        list
        """
        f = self.prepare(values)
        return [f.eval(v) for v in values]

    @abstractmethod
    def eval(self, value):
        """Evaluate the function on a given value. The value may either be a
        scalar or a tuple. The value will be from the list of values that was
        passed to the object in the prepare call.

        The return value of the function is implementation dependent.

        Parameters
        ----------
        value: scalar or tuple
            Value from the list that was used to prepare the function.

        Returns
        -------
        scalar or tuple
        """
        raise NotImplementedError()

    @abstractmethod
    def is_prepared(self):
        """Returns True if the prepare method is ignored by an implementation
        of this function. Containing classes will only call the prepare method
        for those value functions that are not prepared.

        Returns
        -------
        bool
        """
        raise NotImplementedError()

    def map(self, values):
        """The map function takes a list of values and outputs a dictionary.
        The keys in the returned dictionary are the distinct values in the
        input list. The values that are associated with the keys are the result
        of applying the eval function of this class on the key value.

        Parameters
        ----------
        values: list
            List of scalar values or tuples of scalar values.

        Returns
        -------
        dict
        """
        f = self.prepare(values)
        result = dict()
        for v in values:
            if v not in result:
                result[v] = f.eval(v)
        return result

    @abstractmethod
    def prepare(self, values):
        """Optional step to prepare the function for a given list of values.
        This step allows to compute statistics over the list of values for
        which the eval method will be called.

        Parameters
        ----------
        values: list
            List of scalar values or tuples of scalar values.

        Returns
        -------
        openclean.function.base.ValueFunction
        """
        raise NotImplementedError()


# -- Default base class implementations ---------------------------------------

class PreparedFunction(ValueFunction):
    """Abstract base class for value functions that do not make use of the
    prepare method. These functions are considered as initialized and ready
    to operate without the need for calling the prepare method first.
    """
    def __init__(self, name=None, to_dict=None):
        """Initialize the function name.

        Parameters
        ----------
        name: string, default=None
            Unique function name.
        to_dict: callable, default=None
            Function that accepts a value and a feature as arguments and that
            returns a dictionary.
        """
        super(PreparedFunction, self).__init__(name=name)

    def __call__(self, value):
        """Make the function callable for individual values.

        Parameters
        ----------
        value: scalar or tuple
            Value from the list that was used to prepare the function.

        Returns
        -------
        scalar or tuple
        """
        return self.eval(value)

    def is_prepared(self):
        """Instances of this class do not need to be further prepared.

        Returns
        -------
        bool
        """
        return True

    def prepare(self, values):
        """The prepare step is ignored for a wrapped callable.

        Parameters
        ----------
        values: list
            List of scalar values or tuples of scalar values.
        """
        return self


class CallableWrapper(PreparedFunction):
    """Wrapper for callable functions as value functions. This value function
    does not prepare the wrapped callable.
    """
    def __init__(self, func, to_dict=None):
        """Initialize the wrapped callable function. Raises a ValueError if the
        function is not a callable.

        Parameters
        ----------
        func: callable
            Function that is wrapped as a value finction.
        to_dict: callable, default=None
            Function that accepts a value and a feature as arguments and that
            returns a dictionary.

        Raises
        ------
        ValueError
        """
        # Ensure that the given function is actually a callable.
        if not callable(func):
            raise ValueError('not a callable function')
        self.func = func
        super(CallableWrapper, self).__init__(
            name=util.funcname(self.func),
            to_dict=to_dict
        )

    def eval(self, value):
        """Evaluate the wrapped function on a given value. The value may either be a
        scalar or a tuple. The return value of the function is dependent on the
        wrapped function.

        Parameters
        ----------
        value: scalar or tuple
            Value from the list that was used to prepare the function.

        Returns
        -------
        scalar or tuple
        """
        return self.func(value)


class ConstantValue(PreparedFunction):
    """Value function that always returns a given constant value."""
    def __init__(self, value, name=None, to_dict=None):
        """Initialize the constant value that is returned by this function
        whenever the eval method is called..

        Parameters
        ----------
        value: scalar or tuple
            Constant return value for the eval method.
        name: string, default='constant'
            Optional unique function name.
        to_dict: callable, default=None
            Function that accepts a value and a feature as arguments and that
            returns a dictionary.
        """
        super(ConstantValue, self).__init__(
            name=name if name else 'constant',
            to_dict=to_dict
        )
        self.const = value

    def eval(self, value):
        """Evaluate the wrapped function on a given value. The value may either be a
        scalar or a tuple. The return value of the function is dependent on the
        wrapped function.

        Parameters
        ----------
        value: scalar or tuple
            Value from the list that was used to prepare the function.

        Returns
        -------
        scalar or tuple
        """
        return self.const


# -- Helper classes and functions ---------------------------------------------

class DefaultDictSerializer(object):
    """Default serializer for (value, feature)-pairs generated by a dictionary
    function. Serializes each pair as a dictionary with two elements (value and
    feature). The element labels can be set in the constructor of the class.
    """
    def __init__(self, value_label='value', feature_label='feature'):
        """Initialize the element labels for the returned dictionaries.

        Parameters
        ----------
        value_label: string, default='value'
            Dictionary key associated with given values.
        feature_label: string, default='feature'
            Dictionary key associated with given features.
        """
        self.value_label = value_label
        self.feature_label = feature_label

    def __call__(self, value, feature):
        """Get dictionary serialization for a (value, feature)-pair.

        Parameters
        ----------
        value: scalar or tuple
            Value that was mapped to a feature by a dictionary function.
        feature: any
            Feature that was associated with the value by the dictionary
            function.

        Returns
        -------
        dict
        """
        return {self.value_label: value, self.feature_label: feature}


def scalar_pass_through(value):
    """Pass-through method for single scalar values.

    Parameters
    ----------
    value: scalar
        Scalar cell value from a data frame row.

    Returns
    -------
    scalar
    """
    return value


def to_valuefunc(value):
    """Return a value function that represents the given argument. If the
    argument is not a value function, either of the following is expected:
    (i) a callable that will be wrapped in a CallableWrapper, or (2) a constant
    value that will be wrapped in a ConstantValue.

    Parameters
    ----------
    value: scalar, callable, or openclean.function.base.ValueFunction
        Argument that is being represented as a value function.

    Returns
    -------
    openclean.function.base.ValueFunction
    """
    if not isinstance(value, ValueFunction):
        if callable(value):
            value = CallableWrapper(func=value)
        else:
            value = ConstantValue(value)
    return value
